LISTA 2 - 
Listas (simples e duplamente encadeadas), ordenadas e
circulares
1 Questão
/*Escreva um programa em C que permita a criação de uma lista encadeada utilizando
alocação de memória dinâmica. Implemente as funções de inserção, deleção e exibição de
itens da lista.*/

#include  <stdio.h>
#include <stdlib.h>


typedef struct no
{
    int dado;
    
    struct no *prox;
    
}No;


//inserir no início


void inserir_no_inicio(No **lista, int num)
{
	
No *novo = malloc(sizeof(No));

if(novo==NULL){
       
        printf("Erro de alocação de memória!!!!");
       
        exit(1);
}
else{
novo->dado=num;
novo->prox= *lista;
*lista = novo;
}
}

//inserir no final


void inserir_no_final(No **lista, int num)
{
No *aux, *novo= malloc(sizeof(No));

if(novo==NULL){
       
        printf("Erro de alocação de memória!!!!");
       
        exit(1);
}
else{
novo->dado=num;
novo->prox = NULL;


//É  o primeiro??

if(*lista ==NULL){
    *lista= novo;
}else{

    aux= *lista;

    while(aux->prox)
    {
aux= aux->prox;

   }
   aux->prox=novo;
  }
 }
}


//Inserir no meio


void inserir_no_meio(No **lista, int num, int ant)
{
    No *aux = *lista, *novo = malloc(sizeof(No));

    if (novo == NULL) {
        printf("Erro de alocação de memória!!!!");
        exit(1);
    }

    novo->dado = num;

    // Lista vazia
    if (*lista == NULL) {
        novo->prox = NULL;
        *lista = novo;
    } else {
        // Percorre a lista até encontrar o valor de referência (ant)
        while (aux && aux->dado != ant) {
            aux = aux->prox;
        }

        if (aux == NULL) {
            printf("Valor de referência não encontrado!\n");
            free(novo); // Libera o nó criado se o valor de referência não for encontrado
        } else {
            novo->prox = aux->prox; // Aponta para o próximo nó do valor de referência
            aux->prox = novo;       // Atualiza o ponteiro do nó de referência
        }
    }
}

//ordenar

void inserir_ordem(No **lista, int num)
{
    No *aux = *lista, *novo = malloc(sizeof(No));
    
    if (novo == NULL) {
        printf("Erro de alocação de memória!!!!");
        exit(1);
    }

    novo->dado = num;
    novo->prox = NULL;

    // Caso a lista esteja vazia ou o valor seja menor que o primeiro elemento
    if (*lista == NULL || novo->dado < (*lista)->dado) {
        novo->prox = *lista;
        *lista = novo;
    } else {
        // Percorre a lista para encontrar a posição correta
        while (aux->prox && aux->prox->dado < novo->dado) {
            aux = aux->prox;
        }

        // Insere o novo nó na posição correta
        novo->prox = aux->prox;
        aux->prox = novo;
    }
}

No* remocao_de_no(No **lista, int num)
{
	
	No *aux = *lista, *remover = NULL;
	
	if(*lista){
		if((*lista)->dado ==num){
			remover = *lista;
			*lista = remover->prox;
		}
		else{
			while(aux->prox && aux->prox!=num){
				aux = aux->prox;
			}if(aux->prox){
				remover=aux->prox;
				aux->prox = remover->prox;
			}
		}
	}
	return remover;
}

//Exibição

void exibir(No *no)
{
    printf("\n\tLista: ");
    while(no)
    {
        printf("%d ", no->dado);
        no=no->prox;
    }
    printf("\n\n");
}

int main()
{
int opcao, valor, anterior;
No *remover, *lista= NULL;
do{

printf("\n\t0 -> Sair\n\t1 -> Inserir Inicio\n\t2 -> Inserir Final\n\t3 -> Inserir Meio\n\t4 -> Inserir Ordenado\n\t5 -> Remover\n\t6 -> Exibir\n\t");
scanf("%d", &opcao);

switch(opcao)
{
    case 1:

    printf("Digite um valor :");
    scanf("%d", &valor);
    inserir_no_inicio(&lista, valor);
    break;

    case 2:
    printf("Digite um valor: ");
    scanf("%d", &valor);
    inserir_no_final(&lista, valor);
    break;

    case 3:
    printf("Digite um valor:\n");
    scanf("%d", &valor);
	printf("Digite o valor de referência:\n");
    scanf("%d", &anterior);
    inserir_no_meio(&lista, valor, anterior);
    break;

    case 4:
    printf("Digite um valor:\n");
    scanf("%d", &valor);
    inserir_ordem(&lista, valor);
    break;
    
    case 5:
    printf("Digite um valor a ser removido:\n");
    scanf("%d", &valor);
    remover = remocao_de_no(&lista, valor);
    
    if(remover){
    	printf("Elemento a ser removido: %d\n", remover->dado);
    	free(remover);
    	
	}
    break;
    
    case 6:
    exibir(lista);
    break;
    default:
    if(opcao != 0){
        printf("Opcao Inválida!!\n");
    }
}
}while(opcao!=0);

    return 0;
}

2 Questão

/*Escreva um programa em C que permita a criação de uma 
lista duplamente encadeada utilizando alocação de 
memória dinâmica. Implemente as funções de inserção, 
deleção e exibição de itens da lista.*/

#include <stdio.h>
#include <stdlib.h>

typedef struct no {
    int dado;
    struct no *prox;
    struct no *anterior;
} No;

// Inserir no início
void inserir_no_inicio(No **lista, int num) {
    No *novo = malloc(sizeof(No));
    if (novo == NULL) {
        printf("Erro de alocação de memória!!!!");
        exit(1);
    }
    novo->dado = num;
    novo->prox = *lista;
    novo->anterior = NULL;
    if (*lista) {
        (*lista)->anterior = novo;
    }
    *lista = novo;
}

// Inserir no final
void inserir_no_final(No **lista, int num) {
    No *aux = *lista, *novo = malloc(sizeof(No));
    if (novo == NULL) {
        printf("Erro de alocação de memória!!!!");
        exit(1);
    }
    novo->dado = num;
    novo->prox = NULL;

    if (*lista == NULL) {
        *lista = novo;
        novo->anterior = NULL;
    } else {
        while (aux->prox) {
            aux = aux->prox;
        }
        aux->prox = novo;
        novo->anterior = aux;
    }
}

// Inserir no meio
void inserir_no_meio(No **lista, int num, int ant) {
    No *aux = *lista, *novo = malloc(sizeof(No));
    if (novo == NULL) {
        printf("Erro de alocação de memória!!!!");
        exit(1);
    }
    novo->dado = num;

    if (*lista == NULL) {
        novo->prox = NULL;
        novo->anterior = NULL;
        *lista = novo;
    } else {
        while (aux && aux->dado != ant) {
            aux = aux->prox;
        }
        if (aux == NULL) {
            printf("Valor de referência não encontrado!\n");
            free(novo);
        } else {
            novo->prox = aux->prox;
            if (aux->prox) {
                aux->prox->anterior = novo;
            }
            novo->anterior = aux;
            aux->prox = novo;
        }
    }
}

// Inserir ordenado
void inserir_ordem(No **lista, int num) {
    No *aux = *lista, *novo = malloc(sizeof(No));
    if (novo == NULL) {
        printf("Erro de alocação de memória!!!!");
        exit(1);
    }
    novo->dado = num;

    if (*lista == NULL || novo->dado < (*lista)->dado) {
        novo->prox = *lista;
        novo->anterior = NULL;
        if (*lista) {
            (*lista)->anterior = novo;
        }
        *lista = novo;
    } else {
        while (aux->prox && aux->prox->dado < novo->dado) {
            aux = aux->prox;
        }
        novo->prox = aux->prox;
        if (aux->prox) {
            aux->prox->anterior = novo;
        }
        novo->anterior = aux;
        aux->prox = novo;
    }
}

// Remoção de nó
No* remocao_de_no(No **lista, int num) {
    No *aux = *lista, *remover = NULL;

    if (*lista) {
        if ((*lista)->dado == num) {
            remover = *lista;
            *lista = remover->prox;
            if (*lista) {
                (*lista)->anterior = NULL;
            }
        } else {
            while (aux->prox && aux->prox->dado != num) {
                aux = aux->prox;
            }
            if (aux->prox) {
                remover = aux->prox;
                aux->prox = remover->prox;
                if (aux->prox) {
                    aux->prox->anterior = aux;
                }
            }
        }
    }
    return remover;
}

// Exibir lista
void exibir(No *no) {
    if (!no) {
        printf("\n\tLista está vazia!\n\n");
        return;
    }

    printf("\n\tLista: ");
    while (no) {
        printf("%d ", no->dado);
        no = no->prox;
    }
    printf("\n\n");
}

// Liberar lista
void liberar_lista(No **lista) {
    No *aux;
    while (*lista) {
        aux = *lista;
        *lista = (*lista)->prox;
        free(aux);
    }
}

// Função principal
int main() {
    int opcao, valor, anterior;
    No *remover, *lista = NULL;

    do {
        printf("\n\t0 -> Sair\n\t1 -> Inserir Início\n\t2 -> Inserir Final\n\t3 -> Inserir Meio\n\t4 -> Inserir Ordenado\n\t5 -> Remover\n\t6 -> Exibir\n\t\n");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                printf("Digite um valor: ");
                scanf("%d", &valor);
                inserir_no_inicio(&lista, valor);
                break;

            case 2:
                printf("Digite um valor: ");
                scanf("%d", &valor);
                inserir_no_final(&lista, valor);
                break;

            case 3:
                printf("Digite um valor: ");
                scanf("%d", &valor);
                printf("Digite o valor de referência: ");
                scanf("%d", &anterior);
                inserir_no_meio(&lista, valor, anterior);
                break;

            case 4:
                printf("Digite um valor: ");
                scanf("%d", &valor);
                inserir_ordem(&lista, valor);
                break;

            case 5:
                printf("Digite um valor a ser removido: ");
                scanf("%d", &valor);
                remover = remocao_de_no(&lista, valor);
                if (remover) {
                    printf("Elemento removido: %d\n", remover->dado);
                    free(remover);
                } else {
                    printf("Elemento não encontrado!\n");
                }
                break;

            case 6:
                exibir(lista);
                break;
                       default:
                if (opcao != 0) {
                    printf("Opção Inválida!\n");
                }
        }
    } while (opcao != 0);

    liberar_lista(&lista);

    return 0;
}
3 Questão

*/Implemente em C uma lista de tarefas ordenada por prioridade, um número inteiro entre 1 e
1.000.000 definido no registro da tarefa. Cada tarefa também deve ter um campo indicando
se está concluída (sim ou não).
O programa deve permitir:
1. Inserir novas tarefas;
2. Listar apenas as tarefas concluídas;
3. Listar apenas as tarefas pendentes.

As tarefas não podem ser excluídas enquanto o programa estiver em execução. Você pode
escolher se a lista será duplamente encadeada ou não.
1. Escreva um programa em C que implemente uma lista circular duplamente encadeada.
1. Devem ser implementadas as funções de inserção, deleção e listagem da lista;
2. A lista deve ser ordenada por um campo de sua escolha;
3. Deve oferecer duas opções de listagem:
1. Ordem crescente
2. Ordem decrescente./*

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Estrutura para representar uma tarefa
typedef struct tarefa {
    int prioridade;
    char descricao[100];
    int concluida; // 0 para pendente, 1 para concluída
    struct tarefa *prox;    // Próximo nó
    struct tarefa *anterior; // Nó anterior
} Tarefa;

// Função para criar uma nova tarefa
Tarefa *nova_tarefa(int prioridade, char *descricao, int concluida) {
    Tarefa *nova = (Tarefa *)malloc(sizeof(Tarefa));
    if (nova == NULL) {
        printf("Erro de alocação de memória!\n");
        exit(1);
    }
    nova->prioridade = prioridade;
    strcpy(nova->descricao, descricao);
    nova->concluida = concluida;
    nova->prox = nova->anterior = nova; // Lista circular: aponta para si mesma inicialmente
    return nova;
}

// Inserir nova tarefa ordenada por prioridade
void inserir_tarefa(Tarefa **lista, int prioridade, char *descricao, int concluida) {
    Tarefa *nova = nova_tarefa(prioridade, descricao, concluida);

    // Se a lista está vazia
    if (*lista == NULL) {
        *lista = nova;
    } else {
        Tarefa *aux = *lista;

        // Inserção na posição correta (ordem crescente de prioridade)
        do {
            if (nova->prioridade < aux->prioridade) break;
            aux = aux->prox;
        } while (aux != *lista);

        // Ajusta os ponteiros para inserir a nova tarefa antes de `aux`
        nova->prox = aux;
        nova->anterior = aux->anterior;
        aux->anterior->prox = nova;
        aux->anterior = nova;

        // Atualiza o início da lista se a nova tarefa for a de menor prioridade
        if (aux == *lista && nova->prioridade < aux->prioridade) {
            *lista = nova;
        }
    }
}

// Função para exibir tarefas (opcionalmente filtradas e em ordem especificada)
void listar_tarefas(Tarefa *lista, int concluida, int ordem) {
    if (!lista) {
        printf("A lista está vazia.\n");
        return;
    }

    Tarefa *aux = lista;
    int encontrou = 0;

    printf("Tarefas %s em ordem %s:\n", concluida ? "concluídas" : "pendentes",
           ordem == 1 ? "crescente" : "decrescente");

    do {
        if (aux->concluida == concluida) {
            printf("Prioridade: %d | Descrição: %s | Status: %s\n",
                   aux->prioridade, aux->descricao, aux->concluida ? "Concluída" : "Pendente");
            encontrou = 1;
        }
        aux = (ordem == 1) ? aux->prox : aux->anterior;
    } while (aux != lista);

    if (!encontrou) {
        printf("Nenhuma tarefa encontrada.\n");
    }
}

// Função principal
int main() {
    Tarefa *lista = NULL;
    int opcao, prioridade, concluida;
    char descricao[100];

    do {
        printf("\nMenu:\n");
        printf("1 - Inserir nova tarefa\n");
        printf("2 - Listar tarefas concluídas (crescente)\n");
        printf("3 - Listar tarefas pendentes (crescente)\n");
        printf("4 - Listar tarefas concluídas (decrescente)\n");
        printf("5 - Listar tarefas pendentes (decrescente)\n");
        printf("0 - Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        getchar(); // Limpa o buffer do teclado

        switch (opcao) {
            case 1:
                printf("Digite a prioridade (1 a 1.000.000): ");
                scanf("%d", &prioridade);
                getchar(); // Limpa o buffer do teclado
                printf("Digite a descrição da tarefa: ");
                fgets(descricao, 100, stdin);
                descricao[strcspn(descricao, "\n")] = '\0'; // Remove o caractere de nova linha
                printf("Tarefa concluída? (1 para Sim, 0 para Não): ");
                scanf("%d", &concluida);
                inserir_tarefa(&lista, prioridade, descricao, concluida);
                printf("Tarefa adicionada com sucesso.\n");
                break;

            case 2:
                listar_tarefas(lista, 1, 1);
                break;

            case 3:
                listar_tarefas(lista, 0, 1);
                break;

            case 4:
                listar_tarefas(lista, 1, 0);
                break;

            case 5:
                listar_tarefas(lista, 0, 0);
                break;

            case 0:
                printf("Encerrando o programa...\n");
                break;

            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);

    return 0;
}



4 Questão

/*Implemente em C duas listas circulares, cada nó com dois campos: dados (um inteiro) e bitR
(um indicador que pode ser 0 ou 1, do tipo char ou boolean). A primeira lista é a primária e a
segunda é a secundária.

O programa deve trocar um item da lista secundária por um da lista primária com base no
seguinte critério:
1. Percorra os nós da lista primária até encontrar um nó com bitR = 0. Esse será o
candidato à troca;
2. Se o bitR do nó visitado for 1, mova-o para o final da lista, ajustando bitR para 0.

3. Após a troca, o item da lista primária assume a posição do item na secundária e vice-
versa;

4. O item da lista secundária que ingressar na lista primária deve ter bitR ajustado para
1;*/

#include <stdio.h>
#include <stdlib.h>

// Estrutura para os nós das listas
typedef struct no {
    int dado;
    char bitR; // 0 ou 1
    struct no *prox; // Ponteiro para o próximo nó
} No;

// Função para criar um novo nó
No *criar_no(int dado, char bitR) {
    No *novo = (No *)malloc(sizeof(No));
    if (novo == NULL) {
        printf("Erro ao alocar memória!\n");
        exit(1);
    }
    novo->dado = dado;
    novo->bitR = bitR;
    novo->prox = novo; // Nó aponta para si mesmo, já que a lista é circular
    return novo;
}

// Função para inserir um nó no final da lista
void inserir_no_final(No **lista, int dado, char bitR) {
    No *novo = criar_no(dado, bitR);
    if (*lista == NULL) {
        *lista = novo;
    } else {
        No *aux = *lista;
        while (aux->prox != *lista) {
            aux = aux->prox;
        }
        aux->prox = novo;
        novo->prox = *lista;
    }
}

// Função para exibir os elementos de uma lista
void exibir_lista(No *lista) {
    if (lista == NULL) {
        printf("A lista está vazia.\n");
        return;
    }
    No *aux = lista;
    do {
        printf("[Dado: %d, bitR: %d] -> ", aux->dado, aux->bitR);
        aux = aux->prox;
    } while (aux != lista);
    printf("(volta ao início)\n");
}

// Função para encontrar um nó com bitR = 0 na lista primária
No *encontrar_no_com_bitR_0(No **lista) {
    if (*lista == NULL) return NULL;
    No *aux = *lista;

    do {
        if (aux->bitR == 0) {
            return aux;
        }
        aux = aux->prox;
    } while (aux != *lista);

    return NULL; // Nenhum nó com bitR = 0 foi encontrado
}

// Função para mover um nó com bitR = 1 para o final da lista e ajustar bitR para 0
void mover_para_final_com_bitR_1(No **lista) {
    if (*lista == NULL) return;
    No *aux = *lista, *anterior = NULL;

    do {
        if (aux->bitR == 1) {
            // Encontrou o nó com bitR = 1
            aux->bitR = 0; // Ajusta bitR para 0

            // Remove o nó atual da posição atual
            if (aux == *lista) {
                while (aux->prox != *lista) aux = aux->prox; // Encontrar o último nó
                aux->prox = (*lista)->prox;
                *lista = (*lista)->prox;
            } else {
                anterior->prox = aux->prox;
            }

            // Insere o nó no final da lista
            inserir_no_final(lista, aux->dado, aux->bitR);
            free(aux); // Libera o nó original
            return;
        }
        anterior = aux;
        aux = aux->prox;
    } while (aux != *lista);
}

// Função para realizar a troca entre listas
void trocar_nos(No **primaria, No **secundaria) {
    if (*primaria == NULL || *secundaria == NULL) {
        printf("Uma das listas está vazia. Troca não realizada.\n");
        return;
    }

    // Encontra um nó com bitR = 0 na lista primária
    No *candidato = encontrar_no_com_bitR_0(primaria);

    // Se nenhum nó com bitR = 0 for encontrado, move os nós com bitR = 1 para o final
    if (candidato == NULL) {
        mover_para_final_com_bitR_1(primaria);
        candidato = encontrar_no_com_bitR_0(primaria);
        if (candidato == NULL) {
            printf("Nenhum nó elegível na lista primária para troca.\n");
            return;
        }
    }

    // Realiza a troca com o primeiro nó da lista secundária
    No *no_secundaria = *secundaria;

    // Salva os valores dos nós para troca
    int temp_dado = candidato->dado;
    char temp_bitR = candidato->bitR;

    // Troca os dados
    candidato->dado = no_secundaria->dado;
    candidato->bitR = 1; // Nó que ingressa na primária assume bitR = 1
    no_secundaria->dado = temp_dado;
    no_secundaria->bitR = temp_bitR;

    printf("Troca realizada com sucesso.\n");
}

// Função principal
int main() {
    No *primaria = NULL, *secundaria = NULL;
    int opcao, dado;
    char bitR;

    do {
        printf("\nMenu:\n");
        printf("1 - Inserir na lista primária\n");
        printf("2 - Inserir na lista secundária\n");
        printf("3 - Exibir lista primária\n");
        printf("4 - Exibir lista secundária\n");
        printf("5 - Trocar nós entre as listas\n");
        printf("0 - Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                printf("Digite o valor do dado: ");
                scanf("%d", &dado);
                printf("Digite o valor de bitR (0 ou 1): ");
                scanf(" %c", &bitR);
                inserir_no_final(&primaria, dado, bitR);
                break;

            case 2:
                printf("Digite o valor do dado: ");
                scanf("%d", &dado);
                printf("Digite o valor de bitR (0 ou 1): ");
                scanf(" %c", &bitR);
                inserir_no_final(&secundaria, dado, bitR);
                break;

            case 3:
                printf("Lista primária:\n");
                exibir_lista(primaria);
                break;

            case 4:
                printf("Lista secundária:\n");
                exibir_lista(secundaria);
                break;

            case 5:
                trocar_nos(&primaria, &secundaria);
                break;

            case 0:
                printf("Encerrando o programa...\n");
                break;

            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);

    return 0;
}



5 Questão

/*Implemente em C um simulador de escalonador de tarefas baseado em prioridade. A lista
principal deve ser ordenada e ter nós com os seguintes campos:
1. Prioridade original

2. Prioridade relativa (inicialmente igual à original, mas ordenada onde o menor valor
tem maior prioridade).

Cada nó da lista principal deve conter uma lista circular com os campos:
1. Prioridade original
2. Prioridade relativa (ordenada como na lista principal)
3. Nome da tarefa (string de até 50 caracteres).

Regras de escalonamento:
1. Escolha o item com maior prioridade relativa na lista principal.
2. Escolha o item com maior prioridade relativa na lista circular (essa é a tarefa
escolhida).
3. A prioridade relativa da tarefa escolhida deve ser incrementada para dar oportunidade
às tarefas de menor prioridade.
4. Se a tarefa escolhida for a última da fila, sua prioridade relativa deve igualar a
prioridade original.*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Estrutura para as tarefas dentro da lista circular
typedef struct tarefa {
    int prioridade_original;
    int prioridade_relativa;
    char nome[50];
    struct tarefa *prox;
} Tarefa;

// Estrutura para a lista principal
typedef struct lista_principal {
    int prioridade_original;
    int prioridade_relativa;
    Tarefa *lista_tarefas; // Ponteiro para a lista circular de tarefas
    struct lista_principal *prox;
} ListaPrincipal;

// Função para criar uma nova tarefa
Tarefa *criar_tarefa(int prioridade_original, char *nome) {
    Tarefa *nova = (Tarefa *)malloc(sizeof(Tarefa));
    if (nova == NULL) {
        printf("Erro ao alocar memória para a tarefa.\n");
        exit(1);
    }
    nova->prioridade_original = prioridade_original;
    nova->prioridade_relativa = prioridade_original;
    strcpy(nova->nome, nome);
    nova->prox = nova; // Lista circular
    return nova;
}

// Função para criar um novo nó da lista principal
ListaPrincipal *criar_lista_principal(int prioridade_original) {
    ListaPrincipal *novo = (ListaPrincipal *)malloc(sizeof(ListaPrincipal));
    if (novo == NULL) {
        printf("Erro ao alocar memória para a lista principal.\n");
        exit(1);
    }
    novo->prioridade_original = prioridade_original;
    novo->prioridade_relativa = prioridade_original;
    novo->lista_tarefas = NULL;
    novo->prox = NULL;
    return novo;
}

// Função para inserir uma tarefa na lista circular
void inserir_tarefa(Tarefa **lista_tarefas, int prioridade_original, char *nome) {
    Tarefa *nova = criar_tarefa(prioridade_original, nome);
    if (*lista_tarefas == NULL) {
        *lista_tarefas = nova;
    } else {
        Tarefa *aux = *lista_tarefas;
        while (aux->prox != *lista_tarefas) {
            aux = aux->prox;
        }
        aux->prox = nova;
        nova->prox = *lista_tarefas;
    }
}

// Função para inserir um nó na lista principal ordenado por prioridade relativa
void inserir_lista_principal(ListaPrincipal **lista, int prioridade_original) {
    ListaPrincipal *novo = criar_lista_principal(prioridade_original);
    if (*lista == NULL || (*lista)->prioridade_relativa > novo->prioridade_relativa) {
        novo->prox = *lista;
        *lista = novo;
    } else {
        ListaPrincipal *aux = *lista;
        while (aux->prox && aux->prox->prioridade_relativa <= novo->prioridade_relativa) {
            aux = aux->prox;
        }
        novo->prox = aux->prox;
        aux->prox = novo;
    }
}

// Função para exibir as tarefas em uma lista circular
void exibir_tarefas(Tarefa *lista_tarefas) {
    if (lista_tarefas == NULL) {
        printf("\tNenhuma tarefa.\n");
        return;
    }
    Tarefa *aux = lista_tarefas;
    do {
        printf("\tTarefa: %s | Prioridade Original: %d | Prioridade Relativa: %d\n",
               aux->nome, aux->prioridade_original, aux->prioridade_relativa);
        aux = aux->prox;
    } while (aux != lista_tarefas);
}

// Função para exibir a lista principal e suas respectivas listas circulares
void exibir_lista_principal(ListaPrincipal *lista) {
    if (lista == NULL) {
        printf("A lista principal está vazia.\n");
        return;
    }
    ListaPrincipal *aux = lista;
    while (aux) {
        printf("Prioridade Original: %d | Prioridade Relativa: %d\n",
               aux->prioridade_original, aux->prioridade_relativa);
        printf("Tarefas:\n");
        exibir_tarefas(aux->lista_tarefas);
        aux = aux->prox;
    }
}

// Função para escolher a tarefa com maior prioridade
void escalonar_tarefa(ListaPrincipal **lista) {
    if (*lista == NULL) {
        printf("A lista principal está vazia.\n");
        return;
    }

    // Encontra o nó com a maior prioridade relativa (menor valor)
    ListaPrincipal *principal = *lista;
    Tarefa *tarefa = principal->lista_tarefas;

    if (tarefa == NULL) {
        printf("Nenhuma tarefa disponível na lista principal.\n");
        return;
    }

    // Encontra a tarefa com a maior prioridade relativa na lista circular
    Tarefa *anterior = tarefa, *escolhida = tarefa;
    do {
        if (tarefa->prioridade_relativa < escolhida->prioridade_relativa) {
            anterior = tarefa;
            escolhida = tarefa;
        }
        tarefa = tarefa->prox;
    } while (tarefa != principal->lista_tarefas);

    // Exibe a tarefa escolhida
    printf("Tarefa Escolhida: %s | Prioridade Original: %d | Prioridade Relativa: %d\n",
           escolhida->nome, escolhida->prioridade_original, escolhida->prioridade_relativa);

    // Incrementa a prioridade relativa da tarefa escolhida
    escolhida->prioridade_relativa++;

    // Se for a última tarefa, reseta a prioridade relativa
    if (escolhida->prox == escolhida) {
        escolhida->prioridade_relativa = escolhida->prioridade_original;
    }
}

// Função principal
int main() {
    ListaPrincipal *lista = NULL;
    int opcao, prioridade;
    char nome[50];

    do {
        printf("\nMenu:\n");
        printf("1 - Inserir tarefa\n");
        printf("2 - Exibir lista principal\n");
        printf("3 - Escalonar tarefa\n");
        printf("0 - Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                printf("Digite a prioridade da tarefa: ");
                scanf("%d", &prioridade);
                printf("Digite o nome da tarefa: ");
                scanf(" %[^\n]", nome);

                // Insere a prioridade na lista principal (se ainda não existir)
                ListaPrincipal *aux = lista;
                while (aux && aux->prioridade_original != prioridade) {
                    aux = aux->prox;
                }
                if (!aux) {
                    inserir_lista_principal(&lista, prioridade);
                    aux = lista;
                }

                // Insere a tarefa na lista circular
                inserir_tarefa(&(aux->lista_tarefas), prioridade, nome);
                break;

            case 2:
                exibir_lista_principal(lista);
                break;

            case 3:
                escalonar_tarefa(&lista);
                break;

            case 0:
                printf("Encerrando o programa...\n");
                break;

            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);

    return 0;
}
