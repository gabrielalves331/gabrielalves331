Questão 1

/*Desenvolva um programa que receba três notas e mostre essas notas em ordem
decrescente. Os valores das notas devem estar obrigatoriamente no intervalo
fechado [0,10].*/

#include <stdio.h>
#include <locale.h>

//subprogramas

void entrada(float *a, float *b, float *c)

 {
 	
    setlocale(LC_ALL, "");
    
    do {
    	
        printf("Insira a primeira nota (0 a 10): ");
        scanf("%f", a);
        printf("Insira a segunda nota (0 a 10): ");
        scanf("%f", b);
        printf("Insira a terceira nota (0 a 10): ");
        scanf("%f", c);

        if (!(*a >= 0 && *a <= 10 && *b >= 0 && *b <= 10 && *c >= 0 && *c <= 10)) {
        	
            printf("\nAs notas devem estar no intervalo 0..10\n");
            
        }
        
    } while (!(*a >= 0 && *a <= 10 && *b >= 0 && *b <= 10 && *c >= 0 && *c <= 10));
}

//subprograma ordem decrescente

float maior(float *x, float *y, float *z) {
	
    if (*x >= *y && *x >= *z){
	
	 return *x;
}
    else if (*y >= *x && *y >= *z) {
	
	return *y;
}
    else {
	
	return *z;
}
}

// Função para encontrar a nota do meio

float meio(float *x, float *y, float *z) {
	
    if ((*x >= *y && *x <= *z) || (*x <= *y && *x >= *z)){
	
	 return *x;
	 
	}
    else if ((*y >= *x && *y <= *z) || (*y <= *x && *y >= *z)){
	
	 return *y;
	 
	 }
	 
    else{ return *z;
    
}
}

// Função para encontrar a menor nota

float menor(float *x, float *y, float *z) 

{
	
    if (*x <= *y && *x <= *z) {
	
	return *x;
}
    else if (*y <= *x && *y <= *z){
	
	return *y;
}
    else{
	return *z;
}
}

// Função para exibir as notas em ordem decrescente
void saida(float maior, float meio, float menor)

 {
    printf("\nA ordem decrescente das notas fornecidas é:\n");
    printf("\t%.2f\n", maior);
    printf("\t%.2f\n", meio);
    printf("\t%.2f\n", menor);
}

// Programa principal
int main() {
    float n1, n2, n3;
    
    entrada(&n1, &n2, &n3);
    
    float m = maior(&n1, &n2, &n3);
    float me = meio(&n1, &n2, &n3);
    float mi = menor(&n1, &n2, &n3);
    
    saida(m, me, mi);
    
    return 0;
}



Questão 2

/*Dados os três valores a,b,c quaisquer para os lados de um triângulo. Uma vez que
esses valores sejam positivos, verificar se os mesmos formam realmente um
triângulo, e se essa condição for verdadeira, indicar qual o tipo do triângulo:
isósceles, escaleno, equilátero. E no caso de ser triangulo escaleno informar se é
retângulo ou não.
*/

#include <locale.h>
#include <stdio.h>
#include <stdlib.h>

//subprogramas entrada

void entrada(int *a, int *b, int *c) {
	
	setlocale(LC_ALL,"");
	
    printf("Insira o valor do lado [a]: ");
    scanf("%i", a);
    printf("Insira o valor do lado [b]: ");
    scanf("%i", b);
    printf("Insira o valor do lado [c]: ");
    scanf("%i", c);
    
}

// Função que verifica se os valores formam um triângulo

int triangulo(int a, int b, int c) 
{
	
    if (a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c > a) {
        return 1; 
    } else {
        return 0; 
    }
}

// equilátero

int equilatero(int a, int b, int c) {
	
    if (a == b && b == c) {
        return 1; 
    } else {
        return 0;
    }
}

// isósceles
int isosceles(int a, int b, int c) {

    if ((a == b && a != c) || (a == c && a != b) || (b == c && b != a)) {
        return 1; 
    } else {
        return 0;
    }
}

// escaleno
int escaleno(int a, int b, int c) {
	
   if (a != b && a != c && b != c) {
        return 1; 
    } else {
        return 0;
    }
}

// Função que verifica se o triângulo escaleno é retângulo
int retangulo(int a, int b, int c) {
	
    if ((a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)) {
        return 1; // É retângulo
    } else {
        return 0; // Não é retângulo
    }
}

// Função de exibição do resultado
void exibirResultado(int a, int b, int c) {
	
	setlocale(LC_ALL,"");
	
    if (triangulo(a, b, c)) {
        printf("\nÉ um triângulo");

        if (equilatero(a, b, c)) {
            printf(" Equilátero!!\n");
        } else if (isosceles(a, b, c)) {
            printf(" Isósceles!!\n");
        } else if (escaleno(a, b, c)) {
            printf(" Escaleno");
            if (retangulo(a, b, c)) {
                printf(" retângulo!!\n");
            } else {
                printf("!!\n");
            }
        }
    } else {
        printf("Os lados não formam um triângulo.\n");
    }
}

// Programa principal
int main() {
    setlocale(LC_ALL, "");

    int a, b, c;

    // Entrada dos lados
    entrada(&a, &b, &c);

    // Exibir o resultado
    exibirResultado(a, b, c);

    return 0;
}


Questão 3
 /*Desenvolver um programa que receba dois números a, b quaisquer. Sem utilizar o
operador de divisão da linguagem, o programa deve exibir o quociente e resto da
divisão inteira a÷b. Após a exibição, o usuário escolhe continuar informando
novos valores ou encerra o programa.

*/

#include <locale.h>
#include <stdio.h>

// Função para entrada dos números
void entrada(int *a, int *b) {
    setlocale(LC_ALL, "");
    printf("Insira o valor do número [a]: ");
    scanf("%i", a);
    printf("Insira o valor do número [b]: ");
    scanf("%i", b);
}

// Função para calcular o quociente da divisão inteira
int quociente(int a, int b) {
    int q = 0;
    while (a >= b) {
        a -= b;
        q++;
    }
    return q;
}

// Função para calcular o resto da divisão inteira
int resto(int a, int b) {
	
    while (a >= b) {
        a -= b;
    }
    return a; // O valor de 'a' é o resto
}

// Função para exibir o resultado
void exibirResultado(int a, int b) {
    int q = quociente(a, b);
    int r = resto(a, b);
    
    printf("\nO valor do quociente da divisão de %i por %i é: %i\n", a, b, q);
    printf("\nO valor do resto da divisão de %i por %i é: %i\n", a, b, r);
}

// Programa principal
int main() {
    setlocale(LC_ALL, "");

    int a, b;
    char continuar;

    do {
        entrada(&a, &b);
        exibirResultado(a, b);
        
        printf("Deseja continuar (s/n)? ");
        scanf(" %c", &continuar);
    } while (continuar == 's' || continuar == 'S');

    return 0;
}

Questão 4

 /* Desenvolva um programa que receba três números quaisquer e permita que os
números troquem de posição. Para isso, o programa deve oferecer opção de
direção da troca: “direita”,”esquerda” ou encerrar o programa. Por exemplo, caso
os números sejam a=15, b=30, c=45:
a. na troca para direita, o resultado será a=45, b=15, c=30.
b. na troca para esquerda, o resultado será a=30, b=45, c=15. */

#include <locale.h>
#include <stdio.h>

// Função para entrada dos números
void entrada(int *a, int *b, int *c) {
    setlocale(LC_ALL, "");
    printf("Insira o valor do número [a]: ");
    scanf("%i", a);
    printf("Insira o valor do número [b]: ");
    scanf("%i", b);
    printf("Insira o valor do número [c]: ");
    scanf("%i", c);
}

// Função para escolha

int escolha()

{
	int resp;
	
	printf("Escolha se vai querer a troca para direita [1] ou para esquerda [0]: ");
    scanf("%i",&resp);
    
	if(resp ==1){
		
		return 1;
		
	}else 	if(resp ==0){
		
		return 0;
		
	}
	
	
}

// Função para trocar para direita

int direita(int *a, int *b, int *c) 
{
	int w;
	
	  w=*c;
	 *c=*b;
	 *b=*a;
	 *a=w;

	 
}



// Função para trocar para esquerda

int esquerda(int *a, int *b, int *c) 

{
	int w;
	
	 w=*a;
	 *a=*b;
	 *b=*c;
	 *c=w;

}



// Função para exibir o resultado
void exibirResultado(int x, int y, int z, int a, int b, int c) 

{
	
    if(escolha()){
    	
    direita(&a, &b, &c);
    
    printf("\nA troca de valores para a direita de a = [%i] b = [%i] c = [%i] passa a ser: a = [%i] b = [%i] c = [%i]\n",x, y, z,a, b, c);
    	 
	}else{

    esquerda(&a, &b, &c);
     printf("\nA troca de valores para a esquerda de a = [%i] b = [%i] c = [%i] passa a ser: a = [%i] b = [%i] c = [%i]\n", x, y, z ,a, b, c );
}
}

// Programa principal
int main() {
   
    setlocale(LC_ALL, "");

    int a, b, c;
	char continuar;

    do {
    	
    entrada(&a, &b, &c);
    exibirResultado(a, b, c, a, b, c);
        
    printf("Deseja continuar (s/n)? ");
    scanf(" %c", &continuar);
        
    } while (continuar == 's' || continuar == 'S');
        
    return 0;
}





Questão 5

/*Desenvolva um programa que receba um conjunto de números inteiros e informe os dois maiores. O processo de digitação se encerra mediante questionamento ao usuário. */

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <math.h>
#include <ctype.h> // para função tolower

// Entrada de dados
void entrada(int *num, char *continuar) {
    printf("Informe um número:\n\t");
    scanf("%d", num);
    printf("Deseja continuar informando números? (s/n):\n\t");
    scanf(" %c", continuar); // espaço antes de %c para limpar o buffer
    *continuar = tolower(*continuar); // transforma em minúsculo para evitar problemas com maiúsculas
}

// Encontro dos dois maiores
void encontrarDoisMaiores(int num, int *maior1, int *maior2, int *c) {
    if (*c == 0) {
        *maior1 = num;
        *maior2 = num; // inicializa maior2 com o primeiro número também
        *c = 1;
    } else if (num > *maior1) {
        *maior2 = *maior1;
        *maior1 = num;
    } else if (num > *maior2 && num < *maior1) {
        *maior2 = num;
    }
}

// Exibição
void exibicao(int maior1, int maior2) {
    printf("Os dois maiores números são: %d e %d\n", maior1, maior2);
}

// Programa principal
int main() {
    setlocale(LC_ALL, "");
    int num, maior1 = 0, maior2 = 0, c = 0;
    char continuar = 's';

    do {
        // Entrada
        entrada(&num, &continuar);

        // Encontrar os dois maiores
        encontrarDoisMaiores(num, &maior1, &maior2, &c);
        
    } while (continuar == 's');

    // Exibir os dois maiores
    exibicao(maior1, maior2);

    return 0;
}



Questão 6
/*Desenvolva um programa que receba um número inteiro qualquer (positivo ou
negativo) e informe se o número é palíndromo ou não. Número palíndromo é
aquele que uma vez invertido a ordem de seus algarismos permanece igual ao
número original. Exemplos de números palíndromos: 1221,141,20002.*/

#include <stdio.h>
#include <locale.h>

//Subprogramas

//entrada
void entrada(int *n)

{
	 printf("Digite um número inteiro: ");
	 scanf("%i",n);
}

int invertNum(int num) 

{
    int inv = 0;

    while (num != 0) {
        inv = inv * 10 + num % 10; 
        num /= 10; 
    }

    return inv;
}

//exibção

void saida(int nm, int r)

{
	if (nm == r) { 
        printf("O número %d é palíndromo.\n", nm);
    } else {
        printf("O número %d não é palíndromo.\n", nm);
    }
}

//Programa principal
int main() 

{
	
    int n, rever;
    setlocale(LC_ALL,"");
    char continuar;

    do {
    	
    entrada(&n);
    
    rever = invertNum(n);   
    
    saida(n,rever);
      
    printf("Deseja continuar (s/n)? ");
    scanf(" %c", &continuar);
        
    } while (continuar == 's' || continuar == 'S');
    
    

    return 0;
}
Questão 7

/*Sabe-se que a série de Fibonacci é formada pelos os termos 0, 1, 1, 2, 3, 5, 8, 13,
21, 34, 55... Desenvolva um programa que receba a quantidade de termos a ser
exibida e mostre os termos de Fibonacci referente a essa quantidade na ordem
inversa. Assim, se a quantidade de termos pedida for n=6, o programa deve exibir
5, 3, 2, 1, 1, 0.*/

#include <stdio.h>

// Subprogramas

//entrada da quantidade de termos
int entrada_termos()

{
    int termos;
    printf("Informe a quantidade de termos a ser exibida: ");
    scanf("%i", &termos);
    return termos;
}

//Forma inversa de exibção 

void exibir_fibonacci_inverso(int termos)

{
    int a = 0, b = 1, proximo;

// sequência normal
    for (int c = 2; c < termos; c++) {
    	
        proximo = a + b;
        a = b;
        b = proximo;
    }

// sequência inversa
    for (int c = termos; c > 0; c--) {
        if (c == termos) {
            printf("%i ", b);
        } else if (i == termos - 1) {
            printf("%i ", a);
        } else {
            proximo = b - a;
            b = a;
            a = proximo;
            printf("%i ", a);
        }
    }
}

//Programa principal

int main()
{
    int termos; 
	
	termos= entrada_termos();
    
    exibir_fibonacci_inverso(termos);


    return 0;
}






Questão 8

#include <stdio.h>
#include <locale.h>
#include <stdbool.h>

// Função para verificar se um número é primo
bool ehPrimo(int num) 

{
	
	int i;
	
    if (num <= 1) {
    	
    	return 0;
	}
    
    for (i = 2; i * i <= num; i++) {
        if (num % i == 0) {
        	
        	return 0;
		}
		
		
    }
    return 1;
}

// Função para encontrar o sucessor primo
int sucessorPrimo(int num) {
    int sucessor = num + 1;
    while (!ehPrimo(sucessor)) {
        sucessor++;
    }
    return sucessor;
}

int main() {
    setlocale(LC_ALL, "");
    int n;
    char resp[5];

    do {
        // Solicitar número positivo
        do {
            printf("Informe um número positivo: ");
            scanf("%i", &n);
        } while (n <= 0);

        // Encontrar o sucessor primo
        int primo = sucessorPrimo(n);
        printf("Sucessor primo do número %i é: %i\n", n, primo);

        // Perguntar se deseja continuar
        printf("Deseja continuar? (s/n): ");
        scanf("%s", resp);
    } while (resp[0] == 's' || resp[0] == 'S');

    return 0;
}




Questão 9

/*Desenvolva um programa que receba um conjunto de números inteiros quaisquer.
O programa deve mostrar o extenso do número para cada valor que esteja no
intervalo fechado de 1 a 9999. O processo de entrada de novos números se
encerra mediante questionamento ao usuário..
*/

#include<stdio.h>
#include<locale.h>
#include<string.h>

//

void entrada(int *e)

{   
    printf("Informe o número: ");
    scanf("%i",e);
}

//

int pergunta()

{
  int r;
    printf("[Para encerrar, digite '0']: ");
    scanf("%i",&r);	
  return r;
}

//

void saida (char s[95])

{
  printf("\n*-----------------------------*\n");
  printf("%s",s);
  printf("\n*-----------------------------*\n");
}

//

void extenso (int n, char *ntxt)

{
	
  int m,c,d,u;
  char mtxt[50],ctxt[50],dtxt[50],utxt[50];
  
   if(n>=1 && n<=9999){
     m=n/1000;
     c=n%1000/100;
     d=n%1000%100/10;
     u=n%1000%100%10;
     strcpy(ntxt," ");
     strcpy(mtxt,"");
     strcpy(ctxt,"");
     strcpy(dtxt,"");
     strcpy(utxt,"");

     switch(u){
      case 1: strcpy(utxt,"um"); break;
     case 2: strcpy(utxt,"dois"); break;	
     case 3: strcpy(utxt,"três"); break;	
     case 4: strcpy(utxt,"quatro"); break;	
     case 5: strcpy(utxt,"cinco"); break;
     case 6: strcpy(utxt,"seis"); break;	
     case 7: strcpy(utxt,"sete"); break;	
     case 8: strcpy(utxt,"oito"); break;	
     case 9: strcpy(utxt,"nove"); break;			
   }
     switch(d){
       case 1: 
       switch(u){
         case 0: strcpy(dtxt,"dez"); break;
         case 1: strcpy(dtxt,"onze"); break;
         case 2: strcpy(dtxt,"doze"); break;
         case 3: strcpy(dtxt,"treze"); break;
         case 4: strcpy(dtxt,"quatorze"); break;
         case 5: strcpy(dtxt,"quinze"); break;
         case 6: strcpy(dtxt,"dezeseis"); break;
         case 7: strcpy(dtxt,"dezesete"); break;
         case 8: strcpy(dtxt,"dezoito"); break;
         case 9: strcpy(dtxt,"dezenove"); break;
       }strcpy(utxt," ");u=0;break;
       case 2: strcpy(dtxt,"vinte"); break;
       case 3: strcpy(dtxt,"trinta"); break;
       case 4: strcpy(dtxt,"quarenta"); break;
       case 5: strcpy(dtxt,"cinquenta"); break;
       case 6: strcpy(dtxt,"sessenta"); break;
       case 7: strcpy(dtxt,"setenta"); break;
       case 8: strcpy(dtxt,"oitenta"); break;
       case 9: strcpy(dtxt,"noventa"); break;
   }
   switch(c){
     case 1: 
       if(d==0 && u==0){
         strcpy(ctxt,"cem"); 
       }
       else{
         strcpy(ctxt,"cento"); 
     }break;
     case 2: strcpy(ctxt,"duzentos"); break;
     case 3: strcpy(ctxt,"trezentos"); break;
     case 4: strcpy(ctxt,"quatrocentos"); break;
     case 5: strcpy(ctxt,"quinhentos"); break;
     case 6: strcpy(ctxt,"seiscentos"); break;
     case 7: strcpy(ctxt,"setecentos"); break;
     case 8: strcpy(ctxt,"oitocentos"); break;
     case 9: strcpy(ctxt,"novecentos"); break;
   }
   switch(m){
     case 1: strcpy(mtxt,"mil"); break;
     case 2: strcpy(mtxt,"dois mil"); break;
     case 3: strcpy(mtxt,"três mil"); break;
     case 4: strcpy(mtxt,"quatro mil"); break;
     case 5: strcpy(mtxt,"cinco mil"); break;
     case 6: strcpy(mtxt,"seis mil"); break;
     case 7: strcpy(mtxt,"sete mil"); break;
     case 8: strcpy(mtxt,"oito mil"); break;
     case 9: strcpy(mtxt,"nove mil"); break;
   }
     strcat(ntxt,mtxt);
     strcat(ntxt," ");	
     strcat(ntxt,ctxt);
     if(m!=0 && c!=0){
         if(d!=0){
         strcat(ntxt," e ");
         }else{
         strcat(ntxt," ");}
      }
      else if(m!=0 && c==0){
         if(d!=0){
         strcat(ntxt," e ");
         }else{
         strcat(ntxt," ");}
      }
      else if(m==0 && c!=0){
         if(d!=0){
         strcat(ntxt," e ");
         }else{
         strcat(ntxt," ");}
      }
      else{
         strcat(ntxt," ");}
      strcat(ntxt,dtxt); 
      if(d==0 && u!=0){
        if(m!=0 || c!=0){
          strcat(ntxt," e ");
        }else{
        strcat(ntxt," ");}
      }
      else if(d!=0 && u!=0){
      strcat(ntxt," e ");
      }else{
      strcat(ntxt," ");}
      strcat(ntxt,utxt);

   }
}

//

int main ()

{
  int n,r;
  char txt[100];

  do{
    entrada(&n);
    extenso(n,txt);
    saida(txt);
    r=pergunta();
  }while(r!=0);

  return 0; 
}
Questão 10
/*Desenvolver um programa para receber três valores a,b,c quaisquer para os lados
de um triângulo, assegurando-se que sejam valores positivos. Em seguida
deve-se verificar se os valores formam ou não um triângulo. Em sendo um
triângulo, deve-se permitir que o usuário escolha qualquer um dos lados (a,b,c)
para realizar decrementos sobre esse lado de um valor x (fornecido pelo usuário)
até que a condição de existência do triângulo se torne inválida. Neste processo, o
programa deve contar e exibir quantos triângulos válidos são formados seguindo o
procedimento de decremento. Por exemplo, para a=3, b=4, c=5 escolhendo-se “a”
com decremento x=0.5 são contados 4 triângulos válidos.
*/

#include<stdio.h>
#include<locale.h>

void entrada(float *a, float *b, float *c) 

{
  do{
    printf("Informe a: ");
    scanf("%f", a);
  }while(*a<=0);
  do{
    printf("Informe b: ");
    scanf("%f", b);
  }while(*b<=0);
  do{
      printf("Informe c: ");
      scanf("%f", c);
  }while(*c<=0);
}

int pergunta() 

{
  int r;
  do{
      printf("Escolha um lado para realizar o decremento:\n[a=1 ; b=2 ; c=3]\n");
      scanf("%i",&r);
    if(!(r>=1 && r<=3)){
      printf("\n[Escolha entre 1-3!!]\n\n");
    }
  }while(!(r>=1 && r<=3));
  
  return r;
}

void pergunta2(float *d) 

{
  do{
      printf("Informe um valor para o decremento: ");
      scanf("%f", d);
  }while (*d<=0);
}

void saida(int s) 

{
  printf("\n*-----------------------------------------------------------*\n");
  printf("Quantidade de triângulos formados: %i\n", s);
  printf("\n*-----------------------------------------------------------*\n");
}

//

int ehTriangulo(float a, float b, float c) 

{
  int r;
  if(a+b>c && a+c>b && b+c>a){
    r=1; 
  }else{
    r=0; 
  }
  
  return r;
}
int QuantidadeTriangulo(float a, float b, float c, int r, float x)
{
  float decremento;
  int cont=1;

  if(r==1){
      decremento=a;
      while(decremento-x>0 && (ehTriangulo(decremento-x, b, c))==1){
          decremento-=x;
          cont++;
      }
  }else if(r==2) {
      decremento=b;
      while (decremento-x>0 && (ehTriangulo(a,decremento-x, c))==1){
          decremento-=x;
          cont++;
      }
  }else if(r==3){
      decremento=c;
      while (decremento-x>0 && (ehTriangulo(a, b,decremento-x))==1){
          decremento-=x;
          cont++;
      }
  }

  return cont;
}
int main()
{
  setlocale(LC_ALL, "Portuguese");

  float a,b,c,x;
  int r,tri,quant;

  entrada(&a ,&b, &c);

  tri=ehTriangulo(a,b,c);
  if(tri==0){
      return 0; 
  }else{
    r=pergunta();
    pergunta2(&x);
    quant=QuantidadeTriangulo(a,b,c,r,x);
    saida(quant);
  }
  return 0;
}
